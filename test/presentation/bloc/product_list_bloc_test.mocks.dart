// Mocks generated by Mockito 5.4.4 from annotations
// in product_listing_app_prj/test/presentation/bloc/product_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:product_listing_app_prj/domain/entities/product.dart' as _i5;
import 'package:product_listing_app_prj/domain/repositories/product_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i3.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, List<_i5.Product>>> getProducts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, List<_i5.Product>>>.value(
            _FakeEither_0<Exception, List<_i5.Product>>(
          this,
          Invocation.method(
            #getProducts,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, List<_i5.Product>>>);

  @override
  _i4.Future<_i2.Either<Exception, List<_i5.Product>>> searchProducts(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchProducts,
          [query],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, List<_i5.Product>>>.value(
            _FakeEither_0<Exception, List<_i5.Product>>(
          this,
          Invocation.method(
            #searchProducts,
            [query],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, List<_i5.Product>>>);

  @override
  _i4.Future<_i2.Either<Exception, List<_i5.Product>>> filterByCategory(
          String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterByCategory,
          [category],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, List<_i5.Product>>>.value(
            _FakeEither_0<Exception, List<_i5.Product>>(
          this,
          Invocation.method(
            #filterByCategory,
            [category],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, List<_i5.Product>>>);

  @override
  _i4.Future<_i2.Either<Exception, List<_i5.Product>>> filterByBrand(
          String? brand) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterByBrand,
          [brand],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, List<_i5.Product>>>.value(
            _FakeEither_0<Exception, List<_i5.Product>>(
          this,
          Invocation.method(
            #filterByBrand,
            [brand],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, List<_i5.Product>>>);

  @override
  _i4.Future<_i2.Either<Exception, List<_i5.Product>>> sortByName() =>
      (super.noSuchMethod(
        Invocation.method(
          #sortByName,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, List<_i5.Product>>>.value(
            _FakeEither_0<Exception, List<_i5.Product>>(
          this,
          Invocation.method(
            #sortByName,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, List<_i5.Product>>>);

  @override
  _i4.Future<_i2.Either<Exception, List<_i5.Product>>> sortByMRP() =>
      (super.noSuchMethod(
        Invocation.method(
          #sortByMRP,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, List<_i5.Product>>>.value(
            _FakeEither_0<Exception, List<_i5.Product>>(
          this,
          Invocation.method(
            #sortByMRP,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, List<_i5.Product>>>);
}
